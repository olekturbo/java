package ug.aleksanderszewczak.techut.zad02.service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import ug.aleksanderszewczak.techut.zad02.domain.Bicycle;

public class BicycleService {

	private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private final Connection connection;
    private final Statement statement;
    private final String CREATE_TABLE_SQL = "CREATE TABLE Bicycle (id bigint GENERATED BY DEFAULT AS IDENTITY, producer VARCHAR(30), price DOUBLE, productionDate DATE, isReserved BOOLEAN)";
    private boolean tableExists = false;
    
    private PreparedStatement addBicycleStmt;
    private PreparedStatement getAllBicyclesStmt;
    private PreparedStatement getBicycleByIdStmt;
    private PreparedStatement deleteAllBicyclesStmt;
    private PreparedStatement deleteBicycleByIdStmt;

    public BicycleService() throws SQLException {
        connection = DriverManager.getConnection(URL);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

        while (rs.next()) {
            if ("Bicycle".equalsIgnoreCase(rs.getString("table_name"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists) {
            statement.executeUpdate(CREATE_TABLE_SQL);
        }
        
        addBicycleStmt = connection.prepareStatement("INSERT INTO Bicycle (producer, price, productionDate, isReserved) VALUES (?,?,?,?)");
        getAllBicyclesStmt = connection.prepareStatement("SELECT * FROM Bicycle");
        getBicycleByIdStmt = connection.prepareStatement("SELECT * FROM Bicycle WHERE ID=?");
        deleteAllBicyclesStmt = connection.prepareStatement("DELETE FROM Bicycle");
        deleteBicycleByIdStmt = connection.prepareStatement("DELETE FROM Bicycle WHERE ID=?");
    }
    
    public void addBicycle(Bicycle bicycle) {
    	try {
    		addBicycleStmt.setString(1, bicycle.getProducer());
    		addBicycleStmt.setDouble(2, bicycle.getPrice());
    		addBicycleStmt.setDate(3, bicycle.getProductionDate());
    		addBicycleStmt.setBoolean(4, bicycle.isReserved());
    		
    		addBicycleStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public List<Bicycle> getAllBicycles() {
    	List<Bicycle> guitars = new ArrayList<Bicycle>();
    	try {
    		ResultSet rs = getAllBicyclesStmt.executeQuery();
    		
    		while (rs.next() ) {
    			Bicycle newBicycle = new Bicycle(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("productionDate"), rs.getBoolean("isReserved"));
    			guitars.add(newBicycle);
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return guitars;
    }
    
    public Bicycle getBicycleById(int id) {
		Bicycle newBicycle = new Bicycle();
    	try {
    		getBicycleByIdStmt.setInt(1, id);
    		ResultSet rs = getBicycleByIdStmt.executeQuery();
    		
    		while (rs.next()) {
    			newBicycle = new Bicycle(rs.getString("producer"),
    					rs.getDouble("price"), rs.getDate("productionDate"), rs.getBoolean("isReserved"));
    		}
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    	
    	return newBicycle;
    }
    
    public void deleteAllBicycles() {
    	try {
    		deleteAllBicyclesStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
    }
    
    public void deleteBicycleById(int id) {
    	try {
    		deleteBicycleByIdStmt.setInt(1, id);
    		deleteBicycleByIdStmt.executeUpdate();
    	}
    	catch (SQLException e) {
    		e.printStackTrace();
    	}
}
}
